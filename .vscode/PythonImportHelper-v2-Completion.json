[
    {
        "label": "string1",
        "kind": 5,
        "importPath": "Todo.one",
        "description": "Todo.one",
        "peekOfCode": "string1 = \"To forget the dead\"\nstring2 = \"would be akin to killing them\"\nstring3 = \"a second time\"\n# Problem 1\n# Multiple print statements, that prints these strings in the same line.\n# Output expected - To forget the dead would be akin to killing them a second time\nprint(string1)\nprint(string2)\nprint(string3)\n# Problem 2",
        "detail": "Todo.one",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "Todo.one",
        "description": "Todo.one",
        "peekOfCode": "string2 = \"would be akin to killing them\"\nstring3 = \"a second time\"\n# Problem 1\n# Multiple print statements, that prints these strings in the same line.\n# Output expected - To forget the dead would be akin to killing them a second time\nprint(string1)\nprint(string2)\nprint(string3)\n# Problem 2\n# A single print statement that prints all these three strings seperated by a space",
        "detail": "Todo.one",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "Todo.one",
        "description": "Todo.one",
        "peekOfCode": "string3 = \"a second time\"\n# Problem 1\n# Multiple print statements, that prints these strings in the same line.\n# Output expected - To forget the dead would be akin to killing them a second time\nprint(string1)\nprint(string2)\nprint(string3)\n# Problem 2\n# A single print statement that prints all these three strings seperated by a space\n# Output expected - To forget the dead would be akin to killing them a second time",
        "detail": "Todo.one",
        "documentation": {}
    },
    {
        "label": "XO",
        "kind": 2,
        "importPath": "four",
        "description": "four",
        "peekOfCode": "def XOR (aInput, bInput):\n    if aInput != bInput:\n        return 1\n    else:\n        return 0\nprint (\"output is\", XOR(aInput, bInput))\nif aInput == 1 and bInput == 1:\n    XORGate = \"False\"\n    XORGateNum = 0\nif aInput == 1 and bInput == 0:",
        "detail": "four",
        "documentation": {}
    },
    {
        "label": "numConcat",
        "kind": 2,
        "importPath": "four",
        "description": "four",
        "peekOfCode": "def numConcat(num1, num2):\n        # Convert both the numbers to\n        # strings\n        num1 = str(num1)\n        num2 = str(num2)\n        # Concatenate the strings\n        num1 += num2\n        return int(num1)\ne = (numConcat(a, b))\nprint(e)",
        "detail": "four",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "four",
        "description": "four",
        "peekOfCode": "a = int(input())\nprint (\"enter seconf value\")\nb = int(input())\nprint (\"enter third value\")\nc = int(input())\nprint (\"enter fourth value\")\nd = int(input())\ndef numConcat(num1, num2):\n        # Convert both the numbers to\n        # strings",
        "detail": "four",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "four",
        "description": "four",
        "peekOfCode": "b = int(input())\nprint (\"enter third value\")\nc = int(input())\nprint (\"enter fourth value\")\nd = int(input())\ndef numConcat(num1, num2):\n        # Convert both the numbers to\n        # strings\n        num1 = str(num1)\n        num2 = str(num2)",
        "detail": "four",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "four",
        "description": "four",
        "peekOfCode": "c = int(input())\nprint (\"enter fourth value\")\nd = int(input())\ndef numConcat(num1, num2):\n        # Convert both the numbers to\n        # strings\n        num1 = str(num1)\n        num2 = str(num2)\n        # Concatenate the strings\n        num1 += num2",
        "detail": "four",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "four",
        "description": "four",
        "peekOfCode": "d = int(input())\ndef numConcat(num1, num2):\n        # Convert both the numbers to\n        # strings\n        num1 = str(num1)\n        num2 = str(num2)\n        # Concatenate the strings\n        num1 += num2\n        return int(num1)\ne = (numConcat(a, b))",
        "detail": "four",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "four",
        "description": "four",
        "peekOfCode": "e = (numConcat(a, b))\nprint(e)\nf = (numConcat(c ,d))\nprint(f)\nproduct = (e*f)\nprint(product)",
        "detail": "four",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "four",
        "description": "four",
        "peekOfCode": "f = (numConcat(c ,d))\nprint(f)\nproduct = (e*f)\nprint(product)",
        "detail": "four",
        "documentation": {}
    },
    {
        "label": "product",
        "kind": 5,
        "importPath": "four",
        "description": "four",
        "peekOfCode": "product = (e*f)\nprint(product)",
        "detail": "four",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "string1 = \"To forget the dead\"\nstring2 = \"would be akin to killing them\"\nstring3 = \"a second time\"\n#problem1\nprint(string1, end=\"_\")\nprint(string1)\nprint(string2)\n#problem2\n#method1\nstring4=string1+\" \"+string2+\" \"+ string3",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "string2 = \"would be akin to killing them\"\nstring3 = \"a second time\"\n#problem1\nprint(string1, end=\"_\")\nprint(string1)\nprint(string2)\n#problem2\n#method1\nstring4=string1+\" \"+string2+\" \"+ string3\nprint(string4)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "string3 = \"a second time\"\n#problem1\nprint(string1, end=\"_\")\nprint(string1)\nprint(string2)\n#problem2\n#method1\nstring4=string1+\" \"+string2+\" \"+ string3\nprint(string4)\n#mehod 2",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "string1 = \"hello\"\nstring2 = 8\nstring3 = string1\nstring1 = string2\nstring2 = string3\nprint(string1)\nprint(string2)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "string2 = 8\nstring3 = string1\nstring1 = string2\nstring2 = string3\nprint(string1)\nprint(string2)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "string3 = string1\nstring1 = string2\nstring2 = string3\nprint(string1)\nprint(string2)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "string1 = string2\nstring2 = string3\nprint(string1)\nprint(string2)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "string2 = string3\nprint(string1)\nprint(string2)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "three",
        "description": "three",
        "peekOfCode": "i = 15\nj = \"15\"\nk = 15.0\nl = True\nm = int(input())\nn= float(input())\no = input()\np = bool(input())\nq = str(k)\nprint (\"hello\"+ q)",
        "detail": "three",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "three",
        "description": "three",
        "peekOfCode": "j = \"15\"\nk = 15.0\nl = True\nm = int(input())\nn= float(input())\no = input()\np = bool(input())\nq = str(k)\nprint (\"hello\"+ q)\nprint (\"hello\"+ k)",
        "detail": "three",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "three",
        "description": "three",
        "peekOfCode": "k = 15.0\nl = True\nm = int(input())\nn= float(input())\no = input()\np = bool(input())\nq = str(k)\nprint (\"hello\"+ q)\nprint (\"hello\"+ k)",
        "detail": "three",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "three",
        "description": "three",
        "peekOfCode": "l = True\nm = int(input())\nn= float(input())\no = input()\np = bool(input())\nq = str(k)\nprint (\"hello\"+ q)\nprint (\"hello\"+ k)",
        "detail": "three",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "three",
        "description": "three",
        "peekOfCode": "m = int(input())\nn= float(input())\no = input()\np = bool(input())\nq = str(k)\nprint (\"hello\"+ q)\nprint (\"hello\"+ k)",
        "detail": "three",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "three",
        "description": "three",
        "peekOfCode": "o = input()\np = bool(input())\nq = str(k)\nprint (\"hello\"+ q)\nprint (\"hello\"+ k)",
        "detail": "three",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "three",
        "description": "three",
        "peekOfCode": "p = bool(input())\nq = str(k)\nprint (\"hello\"+ q)\nprint (\"hello\"+ k)",
        "detail": "three",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "three",
        "description": "three",
        "peekOfCode": "q = str(k)\nprint (\"hello\"+ q)\nprint (\"hello\"+ k)",
        "detail": "three",
        "documentation": {}
    },
    {
        "label": "value1",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "value1 = input()\nvalue2 = int(value1)\nprint (value2+1)\nprint(\"Please input integers only\")\na = int(input())\nb = int(input())\n#Operator 1\nprint (a+b);\nprint (a-b);\nprint (a*b);",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "value2",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "value2 = int(value1)\nprint (value2+1)\nprint(\"Please input integers only\")\na = int(input())\nb = int(input())\n#Operator 1\nprint (a+b);\nprint (a-b);\nprint (a*b);\n#division later",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "a = int(input())\nb = int(input())\n#Operator 1\nprint (a+b);\nprint (a-b);\nprint (a*b);\n#division later\n# Operator 2\nprint (a>b)\nprint(a<b)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "b = int(input())\n#Operator 1\nprint (a+b);\nprint (a-b);\nprint (a*b);\n#division later\n# Operator 2\nprint (a>b)\nprint(a<b)\nprint(a==b)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "a = True\nb = False\nprint(a or b)\nprint(a and b)\nprint(not a)\n#Do these operators work outside int\n#Yes, but don't really use anything execpt +\na = \"hello\"\nb = \"world\"\nprint (a+b);",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "b = False\nprint(a or b)\nprint(a and b)\nprint(not a)\n#Do these operators work outside int\n#Yes, but don't really use anything execpt +\na = \"hello\"\nb = \"world\"\nprint (a+b);\n# - & // don't work",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "a = \"hello\"\nb = \"world\"\nprint (a+b);\n# - & // don't work\n#alphabetical\nprint (a>b)\nprint(a<b)\nprint(a==b)\nprint(a>=b)\nprint(a<=b)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "b = \"world\"\nprint (a+b);\n# - & // don't work\n#alphabetical\nprint (a>b)\nprint(a<b)\nprint(a==b)\nprint(a>=b)\nprint(a<=b)\nprint(a!=b)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "h = 6\nprint(a*6)\n# division\na = 5\nb = 2\nc = -5\n# // is integer division. It uses the floor value\nprint(a//b)\nprint (c//b)\nd = 5.0",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "a = 5\nb = 2\nc = -5\n# // is integer division. It uses the floor value\nprint(a//b)\nprint (c//b)\nd = 5.0\ne = 2.0\nf = -5.0\n# / is float division",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "b = 2\nc = -5\n# // is integer division. It uses the floor value\nprint(a//b)\nprint (c//b)\nd = 5.0\ne = 2.0\nf = -5.0\n# / is float division\nprint(d/e)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "c = -5\n# // is integer division. It uses the floor value\nprint(a//b)\nprint (c//b)\nd = 5.0\ne = 2.0\nf = -5.0\n# / is float division\nprint(d/e)\nprint(f/e)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "d = 5.0\ne = 2.0\nf = -5.0\n# / is float division\nprint(d/e)\nprint(f/e)\n# Guess\nval1 = 6.0\nval2 = 2.0\nval3 = 6",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "e = 2.0\nf = -5.0\n# / is float division\nprint(d/e)\nprint(f/e)\n# Guess\nval1 = 6.0\nval2 = 2.0\nval3 = 6\nval4 = 2",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "f = -5.0\n# / is float division\nprint(d/e)\nprint(f/e)\n# Guess\nval1 = 6.0\nval2 = 2.0\nval3 = 6\nval4 = 2\nprint(val1/val2)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "val1",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "val1 = 6.0\nval2 = 2.0\nval3 = 6\nval4 = 2\nprint(val1/val2)\nprint(val1//val2)\nprint(val3/val4)\nprint(val3//val4)\nprint(val1/val4)\nprint(val1//val4)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "val2",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "val2 = 2.0\nval3 = 6\nval4 = 2\nprint(val1/val2)\nprint(val1//val2)\nprint(val3/val4)\nprint(val3//val4)\nprint(val1/val4)\nprint(val1//val4)\nprint(val3/val2)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "val3",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "val3 = 6\nval4 = 2\nprint(val1/val2)\nprint(val1//val2)\nprint(val3/val4)\nprint(val3//val4)\nprint(val1/val4)\nprint(val1//val4)\nprint(val3/val2)\nprint(val3//val2)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "val4",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "val4 = 2\nprint(val1/val2)\nprint(val1//val2)\nprint(val3/val4)\nprint(val3//val4)\nprint(val1/val4)\nprint(val1//val4)\nprint(val3/val2)\nprint(val3//val2)\n# Guess again",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "val1",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "val1 = 5.0\nval2 = 2.0\nval3 = 5\nval4 = 2\nprint(val1/val2)\nprint(val1//val2)\nprint(val3/val4)\nprint(val3//val4)\nprint(val1/val4)\nprint(val1//val4)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "val2",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "val2 = 2.0\nval3 = 5\nval4 = 2\nprint(val1/val2)\nprint(val1//val2)\nprint(val3/val4)\nprint(val3//val4)\nprint(val1/val4)\nprint(val1//val4)\nprint(val3/val2)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "val3",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "val3 = 5\nval4 = 2\nprint(val1/val2)\nprint(val1//val2)\nprint(val3/val4)\nprint(val3//val4)\nprint(val1/val4)\nprint(val1//val4)\nprint(val3/val2)\nprint(val3//val2)",
        "detail": "two",
        "documentation": {}
    },
    {
        "label": "val4",
        "kind": 5,
        "importPath": "two",
        "description": "two",
        "peekOfCode": "val4 = 2\nprint(val1/val2)\nprint(val1//val2)\nprint(val3/val4)\nprint(val3//val4)\nprint(val1/val4)\nprint(val1//val4)\nprint(val3/val2)\nprint(val3//val2)\n# You don't need to remember it. It's just for fun",
        "detail": "two",
        "documentation": {}
    }
]